{
  "introduction": {
    "name": "이동규 이력서",
    "jobTitle": "백엔드 개발자",
    "contact": "010-6676-5621",
    "email": "u__nit@naver.com",
    "linkedin": "https://linkedin.com/in/dongkyu-lee-838343310",
    "github": "https://github.com/unit74",
    "website": "https://unit74.github.io",
    "descriptions": [
      "자료구조와 알고리즘을 통해 성능을 개선한 경험이 많습니다.",
      "프론트엔드 개발 경험을 발휘해 업무에 도움을 준 사례가 많습니다.",
      "능동적이고 적극적인 커뮤니케이션을 추구합니다.",
      "팀과 협력하여 목표를 달성하는 것을 중요하게 생각합니다."
    ]
  },
  "skills": ["Java", "Spring Boot", "Spring Data JPA", "MySQL", "Redis", "Git"],
  "education": [
    {
      "school": "삼성 청년 SW 아카데미",
      "subtitle": "멀티캠퍼스",
      "startDate": "2023.01",
      "endDate": "2023.12",
      "gpa": "총 1,600시간",
      "status": "최우수 수료생 수료",
      "category": "사설교육",
      "description": "웹 풀스택 교육 및 프로젝트 활동"
    },
    {
      "school": "부경대학교",
      "subtitle": "컴퓨터공학부 소프트웨어인공지능전공",
      "startDate": "2021.03",
      "endDate": "2023.02",
      "gpa": "3.33/4.5",
      "status": "졸업",
      "category": "학사"
    },
    {
      "school": "동의대학교",
      "subtitle": "컴퓨터소프트웨어공학과",
      "startDate": "2016.03",
      "endDate": "2021.02",
      "gpa": "3.93/4.5",
      "status": "중퇴",
      "category": "학사"
    }
  ],
  "experience": [
    {
      "company": "주식회사 카카오",
      "position": "인턴",
      "department": "선물개발파트",
      "job": "서버 개발자",
      "startDate": "2024.01",
      "endDate": "2024.02",
      "details": [
        {
          "title": "대규모 트래픽을 견디는 상품 전시 영역 구축 과제 수행",
          "firstTitle": "업무 설명",
          "firstDescription": "카카오 선물하기 서비스의 전시 영역과 유사하게 설계된 과제를 수행했습니다. 3인 1조로 개발했고, 모든 일을 팀원들과 공유하며 진행했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": ["상품 관리 (Admin 영역) REST API 개발"],
          "skills": ["Java", "Spring Boot", "Spring Data JPA", "MySQL"]
        },
        {
          "title": "캐싱 전략 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "nGrinder 기준 부하테스트 결과 TPS가 6K로 목표치에 도달하지 못했습니다. Database의 Connection 점유율이 높은 것을 확인해 캐싱 전략을 개선하고, API 응답 시간을 개선하고자 했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "상품 단건 데이터가 300Byte로 1,000만 건일 때 약 3GB임을 확인",
            "캐시 히트율 100% 유지를 위해 TTL 변경 (5분 → ∞)",
            "캐싱 데이터 정합성 유지를 위해 상품 정보 변경 시 작업 변경 (Cache eviction → Sync)"
          ],
          "thirdTitle": "성과",
          "thirdWorks": [
            "nGrinder 기준 TPS 개선 (6K → 14K)",
            "DB 단건 조회 쿼리 부하 개선 (50~100% → 0%)"
          ],
          "skills": ["MySQL", "Redis"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/d43bf163d462476ca41d0e8ad6153335?pvs=4"
        },
        {
          "title": "RabbitMQ 메시지 순서, 중복, 크기 문제 해결",
          "firstTitle": "문제 설명",
          "firstDescription": "상품이 변경 되면 캐시와 정합성을 맞추기 위해 RabbitMQ로 서버 간 통신을 했습니다. 이 과정에서 메시지 순서가 뒤바뀌거나 중복으로 발행되면 데이터 신선도가 떨어질 것을 우려했고, 메시지에 담는 내용이 많아지면 RabbitMQ가 받는 부하도 커질 것으로 예상되었습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "순서, 중복 문제를 해결하기 위해 Consumer에서 REST API 요청을 통해 최신 데이터를 받아 정합성 유지",
            "크기 문제를 해결하기 위해 상품의 ID만 메시지에 담는 Zero Payload 전략 적용"
          ],
          "skills": ["Java", "Spring Boot", "RabbitMQ"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/RabbitMQ-8a12f12cba07466893d2cee41f8ff9bc?pvs=4"
        },
        {
          "title": "상품 다건 조회 API 성능 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "상품 다건 조회 API 응답 시간이 최대 8초로 성능 문제가 있었습니다. Page 인터페이스로 리턴 받고 있어 총 페이지 수와 같이 의미 없는 쿼리를 더 수행하고 있었습니다. 이를 계기로 무한 스크롤 방식에 적합한 Cursor-based 페이지네이션 방식도 적용하게 되었습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "쿼리 최적화를 위해 페이지네이션 방식 변경 (Offset → Cursor)",
            "샘플 데이터 인덱스 효율을 위해 카디널리티가 높게 재생성"
          ],
          "thirdTitle": "성과",
          "thirdWorks": [
            "페이지네이션 방식 변경으로 조회 쿼리 속도 개선 (최대 8초 → 최대 3초)",
            "샘플 데이터 개선 작업으로 조회 쿼리 속도 (최대 3초 → 최대 0.2초)"
          ],
          "skills": ["Java", "Spring Data JPA", "MySQL"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/API-d2ba86542bbd48979e3087fd1f5fdb74?pvs=4"
        }
      ]
    }
  ],
  "projects": [
    {
      "name": "Timing",
      "participants": "프론트엔드 2명, 백엔드 2명, 인프라 및 검색엔진 2명",
      "organization": "삼성 청년 SW 아카데미",
      "startDate": "2023.10.10",
      "endDate": "2023.11.17",
      "github": "https://github.com/unit74/timing",
      "details": [
        {
          "title": "Timing 프로젝트 서버 개발",
          "firstTitle": "업무 설명",
          "firstDescription": "다른 사람들이 올린 피드를 보고 동기 부여를 얻고 따라해 습관을 만들 수 있도록 습관 형성의 선순환을 도모하는 SNS 프로젝트의 백엔드 개발자로 참여해 서버 개발을 담당했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "SNS 피드, 댓글, 좋아요 REST API 개발",
            "JWT, Kakao OAuth 2.0 인증, 인가 시스템 개발"
          ],
          "skills": [
            "Java",
            "Spring Boot",
            "Spring Security",
            "Spring Data JPA",
            "MariaDB",
            "Redis"
          ]
        },
        {
          "title": "피드 조회 API 성능 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "습관 형성을 따라 시작한 사용자들을 보고 동기 부여를 얻기 위해 '따라 한 모든 피드 한 눈에 보기 기능'을 제공하고자 했습니다. 피드 간 부모-자식 관계를 나타내어야 하며, 관련된 모든 피드를 가져와야 했습니다. 관련된 피드를 모두 조회하려다 보니 부모 피드 조회, 부모 피드의 부모 피드 조회, ...와 같이 H+1회의 쿼리가 발생했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "피드 간 부모-자식 관계를 정의하기 위해 Schema에 Tree 자료구조 적용",
            "관련된 모든 피드를 한 번에 가져오기 위해 Schema에 Disjoint Set 자료구조 적용",
            "root 피드가 삭제되었을 때와 같이 복잡한 상황을 방지하고자 Soft Delete 방식 채택"
          ],
          "thirdTitle": "성과",
          "thirdWorks": ["쿼리 횟수 개선 (최대 H+1회 → 1회)"],
          "skills": ["MariaDB"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/API-a2f9ab30b89741abb5d362422b2ea540?pvs=4"
        },
        {
          "title": "샘플 데이터 삽입 환경 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "샘플 데이터 생성 시 실제 API를 호출해서 더미 데이터를 만들어야 프로젝트 의도를 명확하게 전달할 수 있다고 생각했습니다. 21일간의 습관 형성 프로젝트 특성상 Swagger로 샘플 데이터 삽입은 많은 시간이 소요되었습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": ["샘플 데이터 삽입을 위한 페이지 및 API 개발"],
          "thirdTitle": "성과",
          "thirdWorks": ["샘플 데이터 삽입 시간 감소 (30분 → 2분)"],
          "skills": ["React.js"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/e939a5d0c61d4d6381e950e5ed27482b?pvs=4"
        }
      ]
    },
    {
      "name": "이게MO징",
      "participants": "프론트엔드 2명, 백엔드 2명, 임베디드 2명",
      "organization": "삼성 청년 SW 아카데미",
      "startDate": "2023.08.28",
      "endDate": "2023.10.06",
      "github": "https://github.com/unit74/whatisthis",
      "details": [
        {
          "title": "이게MO징 프로젝트 서버 개발",
          "firstTitle": "업무 설명",
          "firstDescription": "신축 건물 입주 전 사전 점검 기간이 있고, 사전 점검을 통해 발견한 하자를 보수 신청할 수 있습니다. 따라서, 사전 점검을 전문적으로 수행하는 업체들이 생겨났습니다. 저희는 사전 점검 시 사람이 하는 일의 일부를 터틀봇(IoT 장비)으로 대체해 인건비 절감을 목표로 진행했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "비회원 요청, 결제 내역, 점검 기록, 점검 목록 REST API 개발",
            "결제 시스템, 실시간 결제 상태 변경 시스템 개발 (Toss Payments)",
            "SMS OTP 시스템 개발 (Naver Cloud Platform)",
            "CI/CD 파이프라인 구축 및 유지보수 (AWS)"
          ],
          "skills": [
            "Java",
            "Spring Boot",
            "Spring Data JPA",
            "MariaDB",
            "Redis",
            "Jenkins",
            "Docker",
            "Nginx"
          ]
        },
        {
          "title": "프론트, 임베디드 Web Socket 통신 개발 환경 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "백엔드 개발 중 Web Socket 통신 연결 작업을 테스트하며 진행하기 어려웠습니다. 또한, 각 팀에서 백엔드가 제공한 인터페이스에 따라 개발하기 때문에 많은 개발 시간이 소요될 것으로 예상되었습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "프론트와 임베디드의 Web Socket 통신 연결 예제 프로젝트 개발",
            "Web Socket 통신을 위한 인터페이스 및 데이터 구조를 문서화하여 공유"
          ],
          "thirdTitle": "성과",
          "thirdWorks": ["프론트, 백엔드, 임베디드 통합 개발 예상 기간 단축 (1.5주 → 0.5주)"],
          "skills": ["React.js", "Python Tkinter", "Notion"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/Web-Socket-e50dbe4f325041ac9a2a3c6277cae160?pvs=4"
        }
      ]
    },
    {
      "name": "Selett",
      "participants": "프론트엔드 3명, 백엔드 2명",
      "organization": "WAP (교내동아리)",
      "startDate": "2022.09.19",
      "endDate": "2022.11.30",
      "github": "https://github.com/unit74/selett",
      "details": [
        {
          "title": "Selett 프로젝트 서버 개발",
          "firstTitle": "업무 설명",
          "firstDescription": "편리하고 간단한 UI와 자기소개서만을 위한 특화된 기능으로 사소한 불편함을 해소하는 자기소개서 작성 웹 서비스의 백엔드 개발자로 서버 개발을 참여했습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "자기소개서, 폴더 관리 REST API 개발",
            "JWT 인증, 인가 시스템 개발",
            "자기소개서 자동 저장, 개인 프로필 관리 프론트 개발"
          ],
          "skills": [
            "Java",
            "Spring Boot",
            "Spring Security",
            "Spring Data JPA",
            "MariaDB",
            "Redis",
            "React.js"
          ]
        },
        {
          "title": "자기소개서 위치 수정 API 성능 개선",
          "firstTitle": "문제 설명",
          "firstDescription": "자기소개서 또는 폴더의 위치를 커스터마이징하는 기능을 제공하고자 했습니다. 기존에 위치 정보를 절대적으로 정의하고 있었기 때문에 수정 작업이 O(N)으로 최대 N회의 쿼리가 발생하는 문제가 있었습니다.",
          "secondTitle": "업무 내용",
          "secondWorks": [
            "위치 정보를 상대적으로 정의하기 위해 Schema에 Doubly linked list 자료구조 적용",
            "데이터 무결성을 위해 주변 노드를 FK로 가지고 있었으나 Delete 시 문제가 발생하여 FOREIGN_KEY_CHECKS 옵션을 잠시 0으로 설정하고 수행"
          ],
          "thirdTitle": "성과",
          "thirdWorks": ["위치 변경 API 호출 시 쿼리 횟수 감소 (최대 N회 → 최대 5회)"],
          "skills": ["MariaDB"],
          "link": "https://wirehaired-maxilla-2eb.notion.site/API-d20be885d05040a499b8108265a7ad40?pvs=4"
        }
      ]
    }
  ],
  "awards": [
    {
      "contest": "삼성 청년 SW 아카데미 2학기 공통프로젝트",
      "award": "우수상 (2등)",
      "date": "2023.08.18",
      "institution": "삼성전자주식회사",
      "description": [
        "프론트엔드 3명, 백엔드 3명으로 구성된 팀에서 더 많은 어르신에게 교육 기회를 제공하기 위한 플랫폼 개발",
        "비대면 실시간 화상 수업 시스템 개발을 전담하여, 원활한 수업 진행을 위한 기능 개발",
        "어르신 맞춤형 기능인 얼굴 인식 로그인, 그림 일기를 통한 기억 학습 등을 통해 우수함을 인정 받음"
      ]
    },
    {
      "contest": "삼성 청년 SW 아카데미 1학기 성적",
      "award": "우수상 (2등)",
      "date": "2023.05.26",
      "institution": "삼성전자주식회사"
    },
    {
      "contest": "삼성 청년 SW 아카데미 1학기 프로젝트",
      "award": "우수상 (2등)",
      "date": "2023.05.26",
      "institution": "삼성전자주식회사",
      "description": [
        "프론트엔드 1명, 백엔드 1명으로 구성된 팀에서 공공데이터 포털의 API를 활용해 여행지를 소개하는 플랫폼 개발",
        "유튜브와 비슷한 UI를 채택해 사용자 친화적인 기능 제공으로 우수함을 인정 받음"
      ]
    },
    {
      "contest": "Woori 코딩 페스티벌",
      "award": "특별상",
      "date": "2022.09.23",
      "institution": "우리에프아이에스"
    },
    {
      "contest": "부경대학교 컴퓨터공학부 컴퓨터 S/W경진대회",
      "award": "장려상",
      "date": "2022.05.25",
      "institution": "부경대학교 컴퓨터공학부"
    },
    {
      "contest": "2022년 부경대학교 정보융합대학 프로그래밍 경진대회",
      "award": "대상",
      "date": "2022.05.18",
      "institution": "부경대학교 정보융합대학"
    },
    {
      "contest": "제 26회 전국 ICT창의성대회 프로그래밍전문가부문",
      "award": "장려상",
      "date": "2015.08.26",
      "institution": "전국컴퓨터교육협의회"
    },
    {
      "contest": "2015 ICT 어워드코리아 이산수학부문",
      "award": "장려상",
      "date": "2015.07.22",
      "institution": "한국정보과학진흥협회"
    },
    {
      "contest": "제32회 한국정보올림피아드 부산본선대회",
      "award": "동상",
      "date": "2015.06.11",
      "institution": "부산광역시교육청"
    },
    {
      "contest": "제2회 한국대학생ICT경진대회 C언어알고리즘고등부",
      "award": "장려상",
      "date": "2014.10.30",
      "institution": "한국정보과학진흥협회"
    },
    {
      "contest": "제 25회 전국 ICT창의성대회 프로그래밍전문가부문",
      "award": "금상",
      "date": "2014.08.19",
      "institution": "숙명여자대학교"
    }
  ],
  "certifications": [
    {
      "name": "HSAT(Hyundai Software Aptitude Test)",
      "grade": "Level 3",
      "date": "2023.08.11",
      "issuer": "현대엔지비"
    },
    {
      "name": "OPIc",
      "grade": "IM1",
      "date": "2023.07.02",
      "issuer": "ACTFL"
    },
    {
      "name": "SW 역량테스트",
      "grade": "Level B",
      "date": "2023.03.04",
      "issuer": "삼성전자주식회사"
    },
    {
      "name": "SW 역량테스트",
      "grade": "Level B",
      "date": "2022.11.05",
      "issuer": "삼성전자주식회사"
    }
  ]
}
